/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mdc.mim.user;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.15.0)", date = "2024-07-06")
public class IdentifyResp implements org.apache.thrift.TBase<IdentifyResp, IdentifyResp._Fields>, java.io.Serializable, Cloneable, Comparable<IdentifyResp> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IdentifyResp");

  private static final org.apache.thrift.protocol.TField VALID_FIELD_DESC = new org.apache.thrift.protocol.TField("Valid", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("User", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField BASE_RESP_FIELD_DESC = new org.apache.thrift.protocol.TField("BaseResp", org.apache.thrift.protocol.TType.STRUCT, (short)255);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new IdentifyRespStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new IdentifyRespTupleSchemeFactory();

  public boolean Valid; // required
  public @org.apache.thrift.annotation.Nullable User User; // optional
  public @org.apache.thrift.annotation.Nullable com.mdc.mim.base.BaseResp BaseResp; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    VALID((short)1, "Valid"),
    USER((short)2, "User"),
    BASE_RESP((short)255, "BaseResp");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VALID
          return VALID;
        case 2: // USER
          return USER;
        case 255: // BASE_RESP
          return BASE_RESP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VALID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.USER,_Fields.BASE_RESP};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VALID, new org.apache.thrift.meta_data.FieldMetaData("Valid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("User", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, User.class)));
    tmpMap.put(_Fields.BASE_RESP, new org.apache.thrift.meta_data.FieldMetaData("BaseResp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.mdc.mim.base.BaseResp.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IdentifyResp.class, metaDataMap);
  }

  public IdentifyResp() {
  }

  public IdentifyResp(
    boolean Valid)
  {
    this();
    this.Valid = Valid;
    setValidIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public IdentifyResp(IdentifyResp other) {
    __isset_bitfield = other.__isset_bitfield;
    this.Valid = other.Valid;
    if (other.isSetUser()) {
      this.User = new User(other.User);
    }
    if (other.isSetBaseResp()) {
      this.BaseResp = new com.mdc.mim.base.BaseResp(other.BaseResp);
    }
  }

  public IdentifyResp deepCopy() {
    return new IdentifyResp(this);
  }

  @Override
  public void clear() {
    setValidIsSet(false);
    this.Valid = false;
    this.User = null;
    this.BaseResp = null;
  }

  public boolean isValid() {
    return this.Valid;
  }

  public IdentifyResp setValid(boolean Valid) {
    this.Valid = Valid;
    setValidIsSet(true);
    return this;
  }

  public void unsetValid() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VALID_ISSET_ID);
  }

  /** Returns true if field Valid is set (has been assigned a value) and false otherwise */
  public boolean isSetValid() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VALID_ISSET_ID);
  }

  public void setValidIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VALID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public User getUser() {
    return this.User;
  }

  public IdentifyResp setUser(@org.apache.thrift.annotation.Nullable User User) {
    this.User = User;
    return this;
  }

  public void unsetUser() {
    this.User = null;
  }

  /** Returns true if field User is set (has been assigned a value) and false otherwise */
  public boolean isSetUser() {
    return this.User != null;
  }

  public void setUserIsSet(boolean value) {
    if (!value) {
      this.User = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public com.mdc.mim.base.BaseResp getBaseResp() {
    return this.BaseResp;
  }

  public IdentifyResp setBaseResp(@org.apache.thrift.annotation.Nullable com.mdc.mim.base.BaseResp BaseResp) {
    this.BaseResp = BaseResp;
    return this;
  }

  public void unsetBaseResp() {
    this.BaseResp = null;
  }

  /** Returns true if field BaseResp is set (has been assigned a value) and false otherwise */
  public boolean isSetBaseResp() {
    return this.BaseResp != null;
  }

  public void setBaseRespIsSet(boolean value) {
    if (!value) {
      this.BaseResp = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case VALID:
      if (value == null) {
        unsetValid();
      } else {
        setValid((java.lang.Boolean)value);
      }
      break;

    case USER:
      if (value == null) {
        unsetUser();
      } else {
        setUser((User)value);
      }
      break;

    case BASE_RESP:
      if (value == null) {
        unsetBaseResp();
      } else {
        setBaseResp((com.mdc.mim.base.BaseResp)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case VALID:
      return isValid();

    case USER:
      return getUser();

    case BASE_RESP:
      return getBaseResp();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case VALID:
      return isSetValid();
    case USER:
      return isSetUser();
    case BASE_RESP:
      return isSetBaseResp();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof IdentifyResp)
      return this.equals((IdentifyResp)that);
    return false;
  }

  public boolean equals(IdentifyResp that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_Valid = true;
    boolean that_present_Valid = true;
    if (this_present_Valid || that_present_Valid) {
      if (!(this_present_Valid && that_present_Valid))
        return false;
      if (this.Valid != that.Valid)
        return false;
    }

    boolean this_present_User = true && this.isSetUser();
    boolean that_present_User = true && that.isSetUser();
    if (this_present_User || that_present_User) {
      if (!(this_present_User && that_present_User))
        return false;
      if (!this.User.equals(that.User))
        return false;
    }

    boolean this_present_BaseResp = true && this.isSetBaseResp();
    boolean that_present_BaseResp = true && that.isSetBaseResp();
    if (this_present_BaseResp || that_present_BaseResp) {
      if (!(this_present_BaseResp && that_present_BaseResp))
        return false;
      if (!this.BaseResp.equals(that.BaseResp))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((Valid) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetUser()) ? 131071 : 524287);
    if (isSetUser())
      hashCode = hashCode * 8191 + User.hashCode();

    hashCode = hashCode * 8191 + ((isSetBaseResp()) ? 131071 : 524287);
    if (isSetBaseResp())
      hashCode = hashCode * 8191 + BaseResp.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(IdentifyResp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetValid(), other.isSetValid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Valid, other.Valid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUser(), other.isSetUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.User, other.User);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBaseResp(), other.isSetBaseResp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBaseResp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.BaseResp, other.BaseResp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("IdentifyResp(");
    boolean first = true;

    sb.append("Valid:");
    sb.append(this.Valid);
    first = false;
    if (isSetUser()) {
      if (!first) sb.append(", ");
      sb.append("User:");
      if (this.User == null) {
        sb.append("null");
      } else {
        sb.append(this.User);
      }
      first = false;
    }
    if (isSetBaseResp()) {
      if (!first) sb.append(", ");
      sb.append("BaseResp:");
      if (this.BaseResp == null) {
        sb.append("null");
      } else {
        sb.append(this.BaseResp);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'Valid' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (User != null) {
      User.validate();
    }
    if (BaseResp != null) {
      BaseResp.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class IdentifyRespStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public IdentifyRespStandardScheme getScheme() {
      return new IdentifyRespStandardScheme();
    }
  }

  private static class IdentifyRespStandardScheme extends org.apache.thrift.scheme.StandardScheme<IdentifyResp> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, IdentifyResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VALID
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.Valid = iprot.readBool();
              struct.setValidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.User = new User();
              struct.User.read(iprot);
              struct.setUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 255: // BASE_RESP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.BaseResp = new com.mdc.mim.base.BaseResp();
              struct.BaseResp.read(iprot);
              struct.setBaseRespIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetValid()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'Valid' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, IdentifyResp struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(VALID_FIELD_DESC);
      oprot.writeBool(struct.Valid);
      oprot.writeFieldEnd();
      if (struct.User != null) {
        if (struct.isSetUser()) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          struct.User.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.BaseResp != null) {
        if (struct.isSetBaseResp()) {
          oprot.writeFieldBegin(BASE_RESP_FIELD_DESC);
          struct.BaseResp.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class IdentifyRespTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public IdentifyRespTupleScheme getScheme() {
      return new IdentifyRespTupleScheme();
    }
  }

  private static class IdentifyRespTupleScheme extends org.apache.thrift.scheme.TupleScheme<IdentifyResp> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, IdentifyResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeBool(struct.Valid);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetUser()) {
        optionals.set(0);
      }
      if (struct.isSetBaseResp()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetUser()) {
        struct.User.write(oprot);
      }
      if (struct.isSetBaseResp()) {
        struct.BaseResp.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, IdentifyResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.Valid = iprot.readBool();
      struct.setValidIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.User = new User();
        struct.User.read(iprot);
        struct.setUserIsSet(true);
      }
      if (incoming.get(1)) {
        struct.BaseResp = new com.mdc.mim.base.BaseResp();
        struct.BaseResp.read(iprot);
        struct.setBaseRespIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

